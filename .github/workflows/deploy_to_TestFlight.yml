name: deploy_to_TestFlight

on:
  push:
    branches: [ release/* ]

jobs:
  deploy_to_TestFlight:
    name: Deploy to TestFlight
    runs-on: macos-latest
    env:
      # app archive 및 export 에 쓰일 환경 변수 설정
      XC_WORKSPACE: ${{ 'ItsME.xcworkspace' }}
      XC_SCHEME: ${{ 'ItsME' }}
      XC_ARCHIVE: ${{ 'ItsME.xcarchive' }}
      
      # Certification
      ENCRYPTED_CERTIFICATE_FILE_PATH: ${{ '.github/secrets/certificate.p12.gpg' }}
      DECRYPTED_CERTIFICATE_FILE_PATH: ${{ '.github/secrets/certificate.p12' }}
      CERTIFICATE_ENCRYPTION_KEY: ${{ secrets.CERTIFICATE_ENCRYPTION_KEY }}
      CERTIFICATE_EXPORT_KEY: ${{ secrets.CERTIFICATE_EXPORT_PWD }}
    
      # Provisioning
      ENCRYPTED_PROVISIONING_FILE_PATH: ${{ '.github/secrets/iOSAppStorecomILGOBItsME.mobileprovision.gpg' }}
      DECRYPTED_PROVISIONING_FILE_PATH: ${{ '.github/secrets/iOSAppStorecomILGOBItsME.mobileprovision' }}
      PROVISIONING_ENCRYPTION_KEY: ${{ secrets.PROVISIONING_ENCRYPTION_KEY }}
      
      KEYCHAIN: ${{ 'ItsME.temp.keychain' }}
      
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Configure Keychain
        run: |
          security create-keychain -p "" "$KEYCHAIN"
          security list-keychains -s "$KEYCHAIN"
          security default-keychain -s "$KEYCHAIN"
          security unlock-keychain -p "" "$KEYCHAIN"
          security set-keychain-settings -lut 1800
      - name : Configure Code Signing
        run: |
          # certificate 복호화
          gpg -d -o "$DECRYPTED_CERTIFICATE_FILE_PATH" --pinentry-mode=loopback --passphrase "$CERTIFICATE_ENCRYPTION_KEY" "$ENCRYPTED_CERTIFICATE_FILE_PATH"
          # provisioning 복호화
          gpg -d -o "$DECRYPTED_PROVISIONING_FILE_PATH" --pinentry-mode=loopback --passphrase "$PROVISIONING_ENCRYPTION_KEY" "$ENCRYPTED_PROVISIONING_FILE_PATH"
          
          # security 를 사용하여 인증서와 개인 키를 새로 만든 키체인으로 가져옴
          security import "$DECRYPTED_CERTIFICATE_FILE_PATH" -k "$KEYCHAIN" -P "$CERTIFICATE_EXPORT_KEY" -A
          security set-key-partition-list -S apple-tool:,apple: -s -k "" "$KEYCHAIN"
          
          # Xcode에서 찾을 수 있는 프로비저닝을 설치하기 위해 우선 프로비저닝 디렉토리를 생성
          mkdir -p "$HOME/Library/MobileDevice/Provisioning Profiles"
          # 디버깅 용 echo 명령어
          echo `ls .github/secrets/*.mobileprovision`
          # 모든 프로비저닝 프로파일을 rename 하고 위에서 만든 디렉토리로 복사하는 과정
          for PROVISION in `ls .github/secrets/*.mobileprovision`
          do
            UUID=`/usr/libexec/PlistBuddy -c 'Print :UUID' /dev/stdin <<< $(security cms -D -i ./$PROVISION)`
            cp "./$PROVISION" "$HOME/Library/MobileDevice/Provisioning Profiles/$UUID.mobileprovision"
          done
      - name: Archive app
        run: |
          pod install --repo-update --clean-install
          xcodebuild clean archive -workspace $XC_WORKSPACE -scheme $XC_SCHEME -configuration release -archivePath $XC_ARCHIVE
      - name: Export app
        run: |
          xcodebuild -exportArchive -archivePath $XC_ARCHIVE -exportOptionsPlist ExportOptions.plist -exportPath . -allowProvisioningUpdates
      - name: Upload app to TestFlight
        uses: Apple-Actions/upload-testflight-build@v1
        with:
          app-path: 'ItsME.ipa'
          issuer-id: ${{ secrets.APPSTORE_API_ISSUER_ID }}
          api-key-id: ${{ secrets.APPSTORE_API_KEY_ID }}
          api-private-key: ${{ secrets.APPSTORE_API_PRIVATE_KEY }}
        
